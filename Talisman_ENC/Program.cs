using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Talisman_ENC
{
    internal class Program
    {
        static byte[] Rotate = {
            0x11, 0x13, 0x1C, 0x15, 0x19, 0x1E, 0x12, 0x16, 0x18, 0x14, 0x18, 0x19, 0x1F, 0x17, 0x1C, 0x18,
            0x14, 0x1D, 0x17, 0x16, 0x12, 0x11, 0x14, 0x15, 0x18, 0x1E, 0x15, 0x1F, 0x13, 0x1B, 0x18, 0x1E,
            0x15, 0x16, 0x11, 0x17, 0x11, 0x15, 0x14, 0x14, 0x13, 0x16, 0x1B, 0x1B, 0x1B, 0x15, 0x1A, 0x15,
            0x1F, 0x1D, 0x12, 0x10, 0x1F, 0x11, 0x1C, 0x1D, 0x1E, 0x13, 0x1C, 0x10, 0x1A, 0x1F, 0x18, 0x16,
            0x16, 0x1E, 0x15, 0x11, 0x16, 0x1F, 0x1A, 0x15, 0x1F, 0x1E, 0x16, 0x16, 0x1D, 0x12, 0x1F, 0x11,
            0x16, 0x1D, 0x1C, 0x10, 0x14, 0x1C, 0x10, 0x16, 0x15, 0x12, 0x14, 0x17, 0x1F, 0x1A, 0x19, 0x16,
            0x18, 0x16, 0x19, 0x11, 0x1F, 0x12, 0x1F, 0x19, 0x14, 0x1E, 0x1A, 0x1D, 0x18, 0x16, 0x1C, 0x11,
            0x1F, 0x1A, 0x1D, 0x11, 0x1B, 0x15, 0x19, 0x13, 0x1B, 0x17, 0x10, 0x12, 0x18, 0x1D, 0x1B, 0x18,
            0x13, 0x16, 0x12, 0x11, 0x1F, 0x10, 0x16, 0x1D, 0x12, 0x10, 0x19, 0x11, 0x16, 0x13, 0x12, 0x15,
            0x1C, 0x17, 0x18, 0x15, 0x10, 0x14, 0x17, 0x12, 0x1E, 0x14, 0x16, 0x15, 0x1D, 0x15, 0x19, 0x1F,
            0x1A, 0x1A, 0x1F, 0x1E, 0x1A, 0x18, 0x1D, 0x1C, 0x1D, 0x1E, 0x16, 0x12, 0x13, 0x11, 0x17, 0x1E,
            0x1F, 0x19, 0x14, 0x1E, 0x17, 0x10, 0x11, 0x13, 0x12, 0x1C, 0x1D, 0x10, 0x1F, 0x15, 0x15, 0x1E,
            0x1F, 0x19, 0x10, 0x14, 0x16, 0x12, 0x1C, 0x12, 0x1B, 0x17, 0x13, 0x10, 0x12, 0x18, 0x14, 0x11,
            0x1A, 0x16, 0x18, 0x15, 0x11, 0x12, 0x16, 0x1C, 0x16, 0x15, 0x1D, 0x11, 0x19, 0x12, 0x1D, 0x10,
            0x12, 0x1C, 0x16, 0x14, 0x13, 0x1E, 0x1E, 0x16, 0x16, 0x19, 0x17, 0x1E, 0x1A, 0x10, 0x11, 0x17,
            0x10, 0x11, 0x12, 0x11, 0x1F, 0x1D, 0x12, 0x16, 0x1A, 0x10, 0x1E, 0x1A, 0x1A, 0x1A, 0x17, 0x1D,
            0x1D, 0x18, 0x15, 0x1C, 0x11, 0x1C, 0x16, 0x17, 0x14, 0x15, 0x19, 0x12, 0x1E, 0x1B, 0x16, 0x12,
            0x18, 0x13, 0x19, 0x1E, 0x1B, 0x10, 0x17, 0x1F, 0x1C, 0x12, 0x12, 0x1D, 0x1E, 0x12, 0x17, 0x16,
            0x16, 0x19, 0x19, 0x18, 0x17, 0x12, 0x1E, 0x15, 0x1E, 0x11, 0x18, 0x1F, 0x10, 0x16, 0x1A, 0x16,
            0x1C, 0x1C, 0x1E, 0x17, 0x15, 0x16, 0x11, 0x19, 0x11, 0x1C, 0x10, 0x11, 0x17, 0x12, 0x12, 0x16,
            0x1E, 0x17, 0x19, 0x1E, 0x1E, 0x1B, 0x1D, 0x16, 0x14, 0x12, 0x12, 0x1C, 0x1F, 0x11, 0x13, 0x1A,
            0x1F, 0x1D, 0x11, 0x12, 0x18, 0x19, 0x14, 0x11, 0x19, 0x18, 0x15, 0x15, 0x1A, 0x10, 0x1E, 0x15,
            0x15, 0x11, 0x15, 0x14, 0x1D, 0x14, 0x16, 0x1F, 0x19, 0x1A, 0x1B, 0x15, 0x14, 0x15, 0x14, 0x13,
            0x19, 0x1E, 0x17, 0x1E, 0x18, 0x19, 0x1D, 0x14, 0x1C, 0x1B, 0x16, 0x1A, 0x17, 0x1C, 0x16, 0x13,
            0x15, 0x1C, 0x1A, 0x1D, 0x10, 0x1E, 0x13, 0x1E, 0x1D, 0x1A, 0x12, 0x1E, 0x10, 0x15, 0x12, 0x16,
            0x13, 0x11, 0x11, 0x1F, 0x18, 0x11, 0x18, 0x16, 0x14, 0x1B, 0x14, 0x13, 0x1B, 0x19, 0x1C, 0x10,
            0x1D, 0x19, 0x1A, 0x1B, 0x1F, 0x10, 0x1E, 0x1D, 0x1B, 0x10, 0x15, 0x15, 0x15, 0x1B, 0x12, 0x19,
            0x14, 0x1D, 0x13, 0x1A, 0x1A, 0x1A, 0x1E, 0x13, 0x11, 0x10, 0x1D, 0x1F, 0x1C, 0x1A, 0x14, 0x1B,
            0x14, 0x1C, 0x11, 0x18, 0x1F, 0x19, 0x15, 0x11, 0x1B, 0x1F, 0x1F, 0x14, 0x14, 0x14, 0x15, 0x13,
            0x15, 0x1A, 0x16, 0x1E, 0x1C, 0x1C, 0x13, 0x1E, 0x17, 0x1B, 0x19, 0x19, 0x11, 0x17, 0x1F, 0x1A,
            0x1F, 0x1E, 0x1A, 0x1D, 0x1D, 0x11, 0x1E, 0x1A, 0x19, 0x18, 0x1A, 0x1B, 0x1D, 0x1B, 0x19, 0x1F,
            0x18, 0x10, 0x18, 0x1A, 0x14, 0x15, 0x1C, 0x15, 0x13, 0x17, 0x1A, 0x1A, 0x1F, 0x14, 0x18, 0x1C,
            0x1F, 0x11, 0x13, 0x13, 0x17, 0x10, 0x1C, 0x14, 0x18, 0x1F, 0x1A, 0x11, 0x16, 0x14, 0x1E, 0x1A,
            0x17, 0x1B, 0x19, 0x19, 0x1B, 0x1D, 0x14, 0x11, 0x1F, 0x13, 0x18, 0x1E, 0x1B, 0x13, 0x1A, 0x15,
            0x11, 0x15, 0x1D, 0x10, 0x1E, 0x1D, 0x13, 0x18, 0x1E, 0x1C, 0x12, 0x19, 0x13, 0x1A, 0x14, 0x1B,
            0x15, 0x10, 0x1A, 0x1D, 0x11, 0x11, 0x12, 0x1E, 0x1D, 0x19, 0x13, 0x13, 0x15, 0x16, 0x1F, 0x1A,
            0x18, 0x1E, 0x13, 0x1E, 0x1A, 0x10, 0x13, 0x1A, 0x1E, 0x14, 0x14, 0x1D, 0x12, 0x1F, 0x15, 0x1F,
            0x15, 0x13, 0x11, 0x13, 0x13, 0x1B, 0x15, 0x19, 0x1D, 0x14, 0x1A, 0x1F, 0x1D, 0x10, 0x16, 0x1A,
            0x16, 0x1C, 0x1A, 0x17, 0x12, 0x18, 0x13, 0x18, 0x12, 0x10, 0x1B, 0x16, 0x10, 0x10, 0x16, 0x18,
            0x1E, 0x11, 0x1C, 0x1C, 0x11, 0x16, 0x14, 0x18, 0x17, 0x1D, 0x1A, 0x1E, 0x1F, 0x1C, 0x12, 0x1A,
            0x17, 0x1D, 0x13, 0x16, 0x10, 0x1E, 0x1B, 0x15, 0x1A, 0x13, 0x10, 0x11, 0x13, 0x1A, 0x17, 0x17,
            0x1A, 0x13, 0x13, 0x12, 0x1F, 0x19, 0x1E, 0x18, 0x1D, 0x19, 0x1B, 0x15, 0x18, 0x14, 0x10, 0x17,
            0x1B, 0x13, 0x1A, 0x17, 0x10, 0x18, 0x12, 0x14, 0x1F, 0x16, 0x19, 0x14, 0x13, 0x1E, 0x1A, 0x1A,
            0x11, 0x15, 0x1F, 0x1B, 0x1B, 0x10, 0x1D, 0x18, 0x12, 0x1A, 0x18, 0x1D, 0x18, 0x18, 0x12, 0x1B,
            0x15, 0x1D, 0x13, 0x1A, 0x18, 0x1C, 0x19, 0x14, 0x11, 0x12, 0x1E, 0x14, 0x12, 0x1B, 0x1A, 0x1F,
            0x11, 0x14, 0x1B, 0x1D, 0x10, 0x17, 0x1A, 0x15, 0x18, 0x1C, 0x14, 0x1B, 0x1D, 0x18, 0x17, 0x17,
            0x1E, 0x12, 0x18, 0x16, 0x11, 0x1A, 0x19, 0x11, 0x10, 0x14, 0x1F, 0x19, 0x17, 0x1A, 0x11, 0x13,
            0x1D, 0x14, 0x12, 0x17, 0x16, 0x1A, 0x18, 0x1F, 0x11, 0x1D, 0x11, 0x1B, 0x10, 0x10, 0x14, 0x1E,
            0x14, 0x11, 0x1B, 0x19, 0x10, 0x1A, 0x19, 0x1C, 0x1F, 0x12, 0x12, 0x16, 0x1A, 0x1A, 0x1A, 0x1D,
            0x11, 0x14, 0x15, 0x1D, 0x16, 0x1F, 0x18, 0x1D, 0x12, 0x1C, 0x11, 0x1A, 0x1A, 0x10, 0x11, 0x13,
            0x10, 0x1A, 0x1F, 0x1C, 0x14, 0x1F, 0x17, 0x1C, 0x1F, 0x1E, 0x14, 0x17, 0x1B, 0x12, 0x17, 0x10,
            0x10, 0x1D, 0x1B, 0x11, 0x16, 0x16, 0x19, 0x11, 0x12, 0x1A, 0x1E, 0x11, 0x17, 0x1B, 0x10, 0x1C,
            0x1D, 0x18, 0x1C, 0x19, 0x14, 0x16, 0x1B, 0x1A, 0x11, 0x1C, 0x1E, 0x12, 0x17, 0x1B, 0x19, 0x17,
            0x1A, 0x1A, 0x13, 0x17, 0x1C, 0x1C, 0x1E, 0x1C, 0x1B, 0x1D, 0x17, 0x17, 0x19, 0x18, 0x1A, 0x1F,
            0x11, 0x1D, 0x13, 0x11, 0x10, 0x1F, 0x11, 0x13, 0x12, 0x1B, 0x16, 0x19, 0x15, 0x16, 0x19, 0x14,
            0x1A, 0x10, 0x10, 0x18, 0x1D, 0x16, 0x11, 0x19, 0x1B, 0x1B, 0x19, 0x18, 0x1B, 0x12, 0x18, 0x1D,
            0x1F, 0x1F, 0x18, 0x13, 0x12, 0x1E, 0x19, 0x1C, 0x1A, 0x11, 0x11, 0x1F, 0x11, 0x13, 0x1C, 0x18,
            0x11, 0x1E, 0x10, 0x12, 0x1E, 0x13, 0x17, 0x13, 0x10, 0x1E, 0x1C, 0x16, 0x10, 0x1A, 0x19, 0x15,
            0x10, 0x1A, 0x1A, 0x1E, 0x13, 0x12, 0x14, 0x1B, 0x1B, 0x15, 0x1D, 0x1A, 0x18, 0x11, 0x1C, 0x1B,
            0x13, 0x11, 0x10, 0x12, 0x11, 0x1C, 0x1E, 0x10, 0x1B, 0x1A, 0x1A, 0x18, 0x16, 0x19, 0x17, 0x11,
            0x13, 0x1A, 0x15, 0x1C, 0x10, 0x11, 0x16, 0x11, 0x18, 0x16, 0x17, 0x10, 0x19, 0x16, 0x14, 0x19,
            0x14, 0x15, 0x1B, 0x11, 0x16, 0x14, 0x16, 0x1A, 0x1D, 0x1A, 0x12, 0x12, 0x1E, 0x18, 0x13, 0x1F,
            0x1D, 0x12, 0x1D, 0x10, 0x1E, 0x15, 0x1B, 0x1D, 0x1F, 0x1D, 0x12, 0x1E, 0x15, 0x10, 0x11, 0x17,
            0x17, 0x1D, 0x1B, 0x1D, 0x16, 0x15, 0x1D, 0x1C, 0x1D, 0x16, 0x14, 0x15, 0x1D, 0x1C, 0x13, 0x1D
        };

        static byte[] Seed = {
            0xA0, 0x08, 0x99, 0x12, 0xF1, 0x1A, 0xD6, 0xC8, 0x41, 0xD6, 0x30, 0x31, 0x40, 0x0B, 0x15, 0x3C,
            0xE6, 0xD9, 0x51, 0x94, 0xB9, 0x29, 0x50, 0x63, 0xBD, 0x3E, 0xC2, 0x87, 0x91, 0x52, 0x6A, 0xC0,
            0xFD, 0x80, 0xBA, 0x07, 0xBD, 0x2A, 0x6F, 0xB9, 0xDC, 0x46, 0xFA, 0x85, 0x8A, 0xDF, 0x5D, 0xCA,
            0x43, 0x01, 0xFD, 0x7C, 0x80, 0x7B, 0x77, 0xAE, 0x12, 0x7C, 0xE2, 0xDF, 0x1B, 0x18, 0x85, 0xBD,
            0x57, 0x14, 0xFF, 0xCB, 0x3E, 0x99, 0xAA, 0xC2, 0xE9, 0x04, 0x76, 0x53, 0x30, 0x51, 0xC3, 0x8B,
            0xB2, 0xD5, 0x2C, 0xF4, 0x09, 0xC1, 0x17, 0xAE, 0xE4, 0x73, 0x06, 0x6E, 0x51, 0xB6, 0x08, 0x7E,
            0xAE, 0xCB, 0x9A, 0x76, 0x75, 0xF2, 0xC2, 0xF4, 0xAB, 0xCD, 0x74, 0x95, 0x31, 0x69, 0x8C, 0x25,
            0x11, 0xA7, 0x95, 0xE3, 0x8A, 0x61, 0x63, 0xE3, 0x10, 0xB3, 0xFF, 0x4C, 0xF4, 0x48, 0x16, 0x0B,
            0x39, 0x78, 0x33, 0xE1, 0x15, 0x23, 0xF0, 0x21, 0x2E, 0x98, 0xD4, 0x80, 0x8A, 0x78, 0x96, 0x7E,
            0x0F, 0xBC, 0x4C, 0xF3, 0xC4, 0xC5, 0x3F, 0x86, 0x30, 0x1A, 0x2C, 0x91, 0x3F, 0xC1, 0x72, 0x1B,
            0x29, 0x91, 0x01, 0x38, 0xCE, 0x4D, 0xE7, 0xE5, 0xBE, 0x40, 0xFB, 0x82, 0xBD, 0x0D, 0x6D, 0x63,
            0x81, 0x00, 0xB7, 0x78, 0x0B, 0x47, 0xBE, 0xD9, 0xEC, 0x22, 0xB3, 0x20, 0xBD, 0x43, 0xAA, 0x18,
            0xD6, 0x6B, 0x9A, 0x5A, 0x08, 0x67, 0x02, 0x6C, 0x32, 0xDC, 0x5D, 0x4B, 0xA0, 0xF9, 0x7F, 0x97,
            0x68, 0xEC, 0x6E, 0x41, 0xDC, 0x38, 0x30, 0x9D, 0x17, 0x7A, 0x68, 0x85, 0x8D, 0xA2, 0x12, 0xB4,
            0xA4, 0x92, 0xA5, 0xEA, 0xB8, 0xD1, 0x4A, 0x1D, 0x1F, 0xB8, 0xD7, 0x87, 0x5B, 0x3A, 0xFC, 0x53,
            0x0E, 0xFC, 0x5D, 0x91, 0x39, 0xA0, 0xC3, 0xED, 0x62, 0x77, 0xC9, 0xE6, 0x60, 0x5D, 0xE0, 0x23,
            0x75, 0x98, 0x51, 0xC3, 0x73, 0x3E, 0x8A, 0x15, 0x6A, 0x98, 0xE0, 0x62, 0x1C, 0x26, 0x0B, 0xFE,
            0x37, 0x61, 0xB0, 0x95, 0x50, 0x18, 0xCF, 0xB9, 0xB3, 0x22, 0xC0, 0xB1, 0xF6, 0xCF, 0xB7, 0x2C,
            0xCF, 0xE7, 0xD8, 0xC6, 0x38, 0xDD, 0x3A, 0x1A, 0x26, 0xB8, 0xDC, 0x38, 0x1A, 0x56, 0x75, 0x27,
            0xB0, 0x43, 0x49, 0x2B, 0xB9, 0x64, 0xB2, 0xF0, 0xAD, 0x3C, 0x48, 0x61, 0x07, 0xBD, 0xD8, 0xE4,
            0x20, 0x3D, 0xB1, 0xC7, 0x18, 0x44, 0xC5, 0x72, 0x89, 0x96, 0x64, 0x43, 0xCD, 0xAE, 0x5E, 0xB8,
            0x9D, 0x62, 0xF8, 0xAD, 0xC8, 0xAF, 0x0F, 0x25, 0x6D, 0xE0, 0x1B, 0x54, 0x62, 0xBB, 0xB5, 0xBF,
            0x2D, 0x26, 0xE7, 0xFE, 0x10, 0x04, 0xC4, 0x29, 0x93, 0xEC, 0x88, 0xD3, 0xBF, 0xA1, 0xC7, 0xD5,
            0x8D, 0x01, 0x92, 0x34, 0x75, 0x68, 0x86, 0xF9, 0x6C, 0xA7, 0xA2, 0x78, 0xE5, 0x38, 0xD6, 0xF1,
            0x65, 0x1E, 0x59, 0x1E, 0x06, 0x71, 0x8C, 0xCC, 0xBC, 0x20, 0xC1, 0x03, 0xCD, 0x01, 0x0A, 0x16,
            0xE7, 0xEC, 0x75, 0xB3, 0xD5, 0x82, 0xCB, 0x6F, 0x46, 0xB7, 0xAF, 0x70, 0xDA, 0xBB, 0x4D, 0xFD,
            0x16, 0x02, 0x8C, 0x2D, 0xA1, 0x27, 0x44, 0x3E, 0xC7, 0xB2, 0xBE, 0x0D, 0xB3, 0xC2, 0xD1, 0x61,
            0xDF, 0x57, 0x54, 0xFC, 0xE9, 0x2A, 0x9A, 0xED, 0xBA, 0xB0, 0x20, 0x27, 0xEE, 0x18, 0x04, 0x63,
            0x60, 0xA0, 0x70, 0x8F, 0xBF, 0xB7, 0xE0, 0x57, 0x32, 0xC8, 0xDB, 0x59, 0xE2, 0x3C, 0x26, 0x09,
            0x0C, 0x48, 0x99, 0xF5, 0xC3, 0x15, 0x0B, 0xDF, 0x57, 0xC5, 0x47, 0x29, 0x6D, 0x57, 0x58, 0xB5,
            0x81, 0x5A, 0x8F, 0xAE, 0x96, 0xED, 0x26, 0xA7, 0xE6, 0x5B, 0x30, 0xC8, 0x7D, 0x97, 0xB4, 0x16,
            0xA4, 0x87, 0x80, 0x42, 0x89, 0x88, 0x2B, 0x7E, 0x14, 0xD6, 0x7E, 0x91, 0xC8, 0xD0, 0x37, 0x2E,
            0x17, 0xEC, 0x2C, 0x14, 0x93, 0xC4, 0xC0, 0x66, 0x48, 0x46, 0x15, 0x6B, 0x3E, 0x92, 0x1F, 0x0D,
            0xBB, 0x0D, 0xC3, 0x0C, 0xB2, 0x38, 0x30, 0x6D, 0x54, 0xC1, 0xF5, 0xC8, 0xF8, 0x8B, 0x04, 0x73,
            0x76, 0x11, 0xC5, 0xBB, 0x5E, 0x2E, 0x30, 0x88, 0xB8, 0x05, 0xB5, 0xCB, 0x4F, 0xD9, 0xC4, 0x4F,
            0x39, 0x1A, 0x94, 0xDE, 0xFA, 0x8F, 0x07, 0x8C, 0x4E, 0x50, 0x55, 0x9D, 0xD0, 0x2B, 0xF0, 0x02,
            0x8B, 0x32, 0x0E, 0x78, 0xDF, 0x2D, 0x4A, 0xBE, 0xF4, 0xF6, 0x50, 0x0D, 0xCE, 0x97, 0x0B, 0x3D,
            0x53, 0xC5, 0x39, 0x24, 0x7E, 0x59, 0x9C, 0xD8, 0x22, 0x92, 0x09, 0xBA, 0x87, 0xFB, 0xAE, 0x12,
            0xC6, 0xF7, 0x51, 0x70, 0x5C, 0x43, 0x37, 0x2D, 0x55, 0x3B, 0x99, 0x59, 0xCB, 0xAF, 0xB9, 0xBB,
            0x4A, 0xC0, 0x87, 0x6A, 0x19, 0xB5, 0xEE, 0x09, 0x8C, 0x13, 0x04, 0xC6, 0x9A, 0x8C, 0x31, 0x2C,
            0x3C, 0x31, 0x81, 0x90, 0x08, 0x0F, 0x22, 0xA0, 0x9D, 0x1F, 0xF5, 0xE5, 0x32, 0xAD, 0x20, 0x9D,
            0xE4, 0x2E, 0xC0, 0xC3, 0x4D, 0xBE, 0xB6, 0x16, 0xB2, 0x8D, 0xDD, 0xC2, 0x63, 0xFB, 0x9E, 0xD1,
            0x82, 0xF0, 0xD0, 0xE3, 0x92, 0x45, 0x0A, 0x68, 0x9E, 0x6B, 0x2E, 0x52, 0x88, 0x43, 0x33, 0x00,
            0x93, 0x74, 0x6D, 0xEE, 0x0E, 0xB9, 0x7B, 0x24, 0xEA, 0x82, 0xA4, 0xD3, 0x32, 0xC6, 0xBC, 0x26,
            0x61, 0x3E, 0xD7, 0x7A, 0xC5, 0x93, 0x7B, 0x12, 0x0B, 0x56, 0x60, 0x34, 0x63, 0x75, 0xAE, 0xD7,
            0x5A, 0x91, 0x6E, 0x3A, 0x69, 0xF0, 0x13, 0xED, 0xA9, 0xFB, 0x26, 0xFC, 0xD0, 0x85, 0x3E, 0xC2,
            0x6C, 0x6C, 0x75, 0x96, 0x50, 0x57, 0x80, 0x15, 0x82, 0x8D, 0xA4, 0xE2, 0xDD, 0x8C, 0xA1, 0xDC,
            0x53, 0xE7, 0xBE, 0x4B, 0x5D, 0x25, 0xA5, 0xC6, 0xCF, 0x82, 0x66, 0x4A, 0x2C, 0x9A, 0xFC, 0x86,
            0x5E, 0xB4, 0xEF, 0x30, 0xD3, 0x0D, 0xE9, 0x97, 0x47, 0xC2, 0x33, 0x13, 0xA6, 0x83, 0x21, 0x22,
            0x36, 0x57, 0x8C, 0xB8, 0x95, 0xD4, 0x2C, 0x80, 0x60, 0xE5, 0xB7, 0x6C, 0xDE, 0x99, 0x4E, 0xEA,
            0x71, 0x52, 0xFE, 0xF3, 0x3B, 0xCB, 0xDB, 0x7A, 0x99, 0x90, 0xE8, 0x58, 0xE6, 0x02, 0xDE, 0xF8,
            0x8C, 0xEB, 0x97, 0x9D, 0x21, 0x8C, 0xA0, 0x11, 0x5D, 0x6F, 0x16, 0x64, 0xB2, 0xD6, 0xA1, 0xD9,
            0x17, 0xA7, 0x62, 0x3A, 0xEC, 0x66, 0xE2, 0x64, 0x54, 0x47, 0xB2, 0x14, 0x21, 0xFE, 0x5E, 0x28,
            0x50, 0xDC, 0xE4, 0x58, 0xB1, 0x28, 0x02, 0x0B, 0x54, 0xCE, 0x45, 0xE5, 0x10, 0x45, 0x75, 0xB0,
            0xA3, 0x26, 0x75, 0x48, 0x25, 0x35, 0xF8, 0xBD, 0x28, 0x6A, 0xE2, 0x63, 0x80, 0x40, 0x36, 0xB7,
            0x79, 0xE5, 0xD8, 0xA6, 0x52, 0x5A, 0xFF, 0xD2, 0x09, 0xB1, 0x8D, 0xA8, 0xF1, 0x10, 0x1E, 0xF4,
            0xC3, 0xD3, 0xD6, 0x7A, 0x37, 0x49, 0xDE, 0xE3, 0xCE, 0x5A, 0xC2, 0x43, 0x99, 0x53, 0xAE, 0x9F,
            0xF9, 0x65, 0x09, 0xAA, 0x03, 0xE7, 0x08, 0x1E, 0xB6, 0xE7, 0xFA, 0x08, 0xC7, 0x45, 0x13, 0xFC,
            0x11, 0x0B, 0x3F, 0xB8, 0xFC, 0x01, 0xD1, 0x5E, 0xD3, 0x17, 0xB7, 0xC1, 0x46, 0xF5, 0xBC, 0x04,
            0x7A, 0x66, 0x06, 0x73, 0x20, 0xEA, 0x15, 0x4F, 0xB8, 0xA9, 0x86, 0x84, 0x02, 0x52, 0x75, 0xCD,
            0x23, 0xC0, 0xA4, 0x12, 0x8A, 0x76, 0xC2, 0xFB, 0x60, 0x18, 0x3C, 0xD4, 0x5A, 0x36, 0x76, 0x97,
            0xBF, 0x39, 0x6F, 0x18, 0x85, 0x4C, 0x41, 0xDA, 0xE3, 0x14, 0xEF, 0xEE, 0xA5, 0xAD, 0x2C, 0xCD,
            0xB2, 0x28, 0x9C, 0xE6, 0x8D, 0x48, 0x66, 0xFE, 0x3C, 0xA3, 0x43, 0x41, 0xD7, 0x5F, 0x7E, 0x18,
            0x09, 0xAA, 0x03, 0x9C, 0x8A, 0xF3, 0x69, 0x5D, 0xD4, 0x48, 0x5A, 0xD1, 0x85, 0xD0, 0x7E, 0x07
        };


        static void Main(string[] args)
        {
            if(args.Length > 0)
            {
                var path = args[0];
                var dir = Path.GetDirectoryName(path);
                var fname = Path.GetFileName(path);
                var ext = Path.GetExtension(path);
                var fnameext = Path.GetFileNameWithoutExtension(path);
                if (ext == ".enc")
                {
                    var data = File.ReadAllBytes(path);
                    using (var ms = new MemoryStream(data))
                    {
                        var rol = ((int)ms.Length - 3) % 1024 - 1;
                        var pos = ms.Length - 4;
                        if (rol == -1)
                            rol = 1023;
                        if (pos >= 0)
                        {
                            do
                            {
                                int rotate = Rotate[rol--];
                                ms.Seek((int)pos);
                                uint d4 = ms.ReadUInt32();
                                uint lo = d4.RotateLeft(rotate);
                                ms.Skip(-4);
                                ms.Write(lo);
                                if (rol == -1)
                                    rol = 1023;
                                --pos;
                            }
                            while (pos >= 0);
                        }
                        ms.Seek(0);
                        var out_data = new byte[ms.Length / 2];
                        int i = 0;
                        do
                        {
                            var b = ms.ReadByte();
                            ms.Skip(1);
                            out_data[i] = (byte)b;
                            i++;
                        }
                        while (ms.Position < ms.Length);

                        using (var fs = new FileStream($"{dir}\\{fnameext}", FileMode.Create, FileAccess.Write, FileShare.Read))
                        {
                            fs.Write(out_data);
                        }
                    }
                }
                else if(ext == ".xml" || ext == ".csv" || ext == ".txt" || ext == ".h")
                {
                    var data = File.ReadAllBytes(path);
                    var out_data = new byte[data.Length * 2];
                    int j = 0;
                    for(int i = 0; i < data.Length; i++)
                    {
                        if (j == 1024)
                            j = 0;
                        out_data[i * 2] = data[i];
                        out_data[i *2 + 1] = Seed[j++];
                    }

                    using (var fs = new FileStream($"{dir}\\new_{fname}.enc", FileMode.Create, FileAccess.ReadWrite, FileShare.Read))
                    {
                        fs.Write(out_data);

                        int rol = 0;
                        int pos = 0;
                        do
                        {
                            fs.Seek((int)pos);
                            int rotate = Rotate[rol++];    
                            uint d4 = fs.ReadUInt32();
                            uint lo = d4.RotateRight(rotate);
                            fs.Skip(-4);
                            fs.Write(lo);
                            if (rol == 1024)
                                rol = 0;
                            ++pos;
                        }
                        while (pos < fs.Length - 3);
                    }
                }
            }
        }
    }
}
